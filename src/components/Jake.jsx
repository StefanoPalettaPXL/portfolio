/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 jake_the_dog.glb --transform 
Files: jake_the_dog.glb [6.44MB] > C:\Users\spale\Projects\github\portfolio\public\jake_the_dog-transformed.glb [418.02KB] (94%)
Author: OleJu (https://sketchfab.com/OleJu)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/jake-the-dog-8cb12ff5e6574dcb80afb6e8d93d429e
Title: Jake the dog
*/
"use client";

import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber';

export default function Model(props) {
  const { nodes, materials } = useGLTF('/models/jtd.glb');
  const { camera } = useThree();

  const model = useRef();
  const [targetRotation, setTargetRotation] = useState({ x: 0, y: 0 });

  const updateRotation = (event) => {
    const mouseX = event.clientX / window.innerWidth;
    const mouseY = event.clientY / window.innerHeight;

    const newRotation = {
      x: (mouseY - 0.5) / 25,
      y: (mouseX - 0.5) / 25,
    };

    setTargetRotation(newRotation);
  };

  const handleMouseMove = (event) => {
    updateRotation(event);
  };

  React.useEffect(() => {
    window.addEventListener('mousemove', handleMouseMove);

    camera.setFocalLength(15);
    camera.position.set(0, 0, 6);
    camera.updateProjectionMatrix();

    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, [camera]);

  useFrame(() => {
    model.current.rotation.x += (targetRotation.x - model.current.rotation.x) * 0.01;
    model.current.rotation.y += (targetRotation.y - model.current.rotation.y) * 0.01;
  });

  return (
    <group {...props}
      ref={model}
      dispose={null}
      position={[0, 0, 0]}
      scale={1}>
      <mesh geometry={nodes['Box004_Material_#41_0'].geometry} material={materials.PaletteMaterial001} position={[-0.086, -0.12, 0.808]} scale={0.016} />
      <mesh geometry={nodes['Object001_Material_#43_0'].geometry} material={materials.PaletteMaterial002} position={[-0.063, 0.334, 1.859]} rotation={[-0.082, 0.553, -0.209]} scale={0.014} />
      <mesh geometry={nodes['Box005_Material_#44_0'].geometry} material={materials.PaletteMaterial003} position={[0.193, 0.317, 1.95]} rotation={[0, Math.PI / 4, 0]} scale={0.016} />
      <mesh geometry={nodes['Box008_Material_#50_0'].geometry} material={materials.PaletteMaterial004} position={[0.33, -0.433, 2.136]} rotation={[0.382, 0.408, -0.158]} scale={0.009} />
      <mesh geometry={nodes['Plane003_Material_#36_0'].geometry} material={materials.PaletteMaterial005} position={[-0.401, -0.556, 0.786]} rotation={[-Math.PI / 2, 0, Math.PI / 6]} scale={0.014} />
      <mesh geometry={nodes['Plane004_Material_#39_0'].geometry} material={materials.PaletteMaterial006} position={[-1.274, 0.167, 0.056]} rotation={[-Math.PI / 2, 0, Math.PI / 6]} scale={0.014} />
      <mesh geometry={nodes['Box015_Material_#31_0'].geometry} material={materials.PaletteMaterial007} position={[0, 0, 1.8]} scale={0.014} />
      <mesh geometry={nodes['Box016_Material_#40_0'].geometry} material={materials.Material_40} position={[0, 0, -2.243]} scale={0.014} />
      <mesh geometry={nodes['Cone014_Material_#58_0'].geometry} material={materials.PaletteMaterial008} position={[0.304, 0.111, -0.675]} rotation={[-Math.PI / 2, 0, 0]} scale={[-0.025, 0.029, 0.025]} />
    </group>
  )
}

useGLTF.preload('/models/jtd.glb')
